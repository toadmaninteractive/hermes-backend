# @author Igor compiler
# @doc Compiler version: igorc 2.1.4
# DO NOT EDIT THIS FILE - it is machine generated

defmodule WebProtocol.HermesVismaService.Impl do

  @behaviour VismaProtocol.HermesVismaService

  # ----------------------------------------------------------------------------

  defmacro __using__(which) when is_atom(which), do: apply(__MODULE__, which, [])

  def router() do
    quote do
      match "/api/timeoff/report/monthly/:year/:month/office/:office_id", to: VismaProtocol.HermesVismaService.TimeOffReport
      match "/api/visma/report/monthly/by-role/:year/:month/office/:office_id", to: VismaProtocol.HermesVismaService.ReportByRole
      match "/api/visma/report/monthly/:year/:month/office/:office_id", to: VismaProtocol.HermesVismaService.Report
    end
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get Visma monthly report for an office
  """
  @spec get_monthly_report_for_office(
    year :: integer,
    month :: integer,
    office_id :: integer,
    omit_ids :: [integer] | nil,
    omit_uids :: [String.t()] | nil,
    pretty :: boolean | nil,
    api_key :: String.t() | nil
  ) :: {String.t(), binary}
  @impl true
  def get_monthly_report_for_office(
    year,
    month,
    office_id,
    omit_ids,
    omit_uids,
    pretty,
    api_key
  ) when
    is_integer(year) and
    is_integer(month) and
    is_integer(office_id) and
    (is_list(omit_ids) or omit_ids === nil) and
    (is_list(omit_uids) or omit_uids === nil) and
    (is_boolean(pretty) or pretty === nil) and
    (is_binary(api_key) or api_key === nil)
  do
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get Visma monthly report for an office grouped by role
  """
  @spec get_monthly_report_for_office_by_role(
    year :: integer,
    month :: integer,
    office_id :: integer,
    omit_ids :: [integer] | nil,
    omit_uids :: [String.t()] | nil,
    include_ids :: [integer] | nil,
    include_uids :: [String.t()] | nil,
    included_only :: boolean,
    csv :: boolean | nil,
    session :: any()
  ) :: {String.t(), String.t(), binary}
  @impl true
  def get_monthly_report_for_office_by_role(
    year,
    month,
    office_id,
    omit_ids,
    omit_uids,
    include_ids,
    include_uids,
    included_only,
    csv,
    session
  ) when
    is_integer(year) and
    is_integer(month) and
    is_integer(office_id) and
    (is_list(omit_ids) or omit_ids === nil) and
    (is_list(omit_uids) or omit_uids === nil) and
    (is_list(include_ids) or include_ids === nil) and
    (is_list(include_uids) or include_uids === nil) and
    is_boolean(included_only) and
    (is_boolean(csv) or csv === nil)
  do
    unless Hermes.can_get_visma_report?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get timeoff monthly report for an office
  """
  @spec get_time_off_monthly_report_for_office(
    year :: integer,
    month :: integer,
    office_id :: integer,
    api_key :: String.t()
  ) :: VismaProtocol.ExcelTimeOffReport.t()
  @impl true
  def get_time_off_monthly_report_for_office(
    year,
    month,
    office_id,
    api_key
  ) when
    is_integer(year) and
    is_integer(month) and
    is_integer(office_id) and
    is_binary(api_key)
  do
    raise "not_yet_implemented"
  end

end
